#!/usr/bin/python3
from typing import List

import typer

from pwa.stack import create_stack, stack_list, start_stack, stop_stack
from pwa.utils import stacks_list
from pwa.vars import __version__, supported_ansible_versions, supported_distributions

app = typer.Typer()

def ansible_version_callback(ansible: str):
    """
    Select Ansible version.
    """
    if ansible not in supported_ansible_versions:
        versions = ', '.join(supported_ansible_versions)
        raise typer.BadParameter(f"Ansible supported versions: {versions}")
    return ansible

def ansible_versions_callback(ansible_versions: List[str]):
    """
    Select Ansible version.
    """
    for version in ansible_versions:
        versions = ', '.join(supported_ansible_versions)
        if version not in supported_ansible_versions:
            raise typer.BadParameter(f"Ansible supported versions: {versions}")
    return ansible_versions

def distributions_callback(distributions: List[str]):
    for distribution in distributions:
        if distribution not in supported_distributions:
            distributions = ', '.join(supported_distributions)
            raise typer.BadParameter(f"supported distributions: {distributions}")
    return distributions

def stackname_callback(stackname: str):
    stacks = stacks_list()
    if stackname not in stacks:
        raise typer.BadParameter("stacks: " + ', '.join(stacks))
    return stackname

def ansible_versions_completion(incomplete: str):
    completion = []
    for version in supported_ansible_versions:
        if version.startswith(incomplete):
            completion.append(version)
    return completion

def distributions_completion(incomplete: str):
    completion = []
    for distribution in supported_distributions:
        if distribution.startswith(incomplete):
            completion.append(distribution)
    return completion

def stackname_completion(incomplete: str):
    completion = []
    stacks = stacks_list()
    for stack in stacks:
        if stack.startswith(incomplete):
            completion.append(stack)
    return completion


@app.command()
def create(
    stackname: str = typer.Argument(
        ...,
        help="The name of the stack to create"
        ),
    ansible_versions: List[str] = typer.Option(
        None, "--ansible", "-a",
        help="Ansible version to add to the stack",
        callback=ansible_versions_callback,
        autocompletion=ansible_versions_completion
        ),
    distributions: List[str] = typer.Option(
        None, "--distribution", "-d",
        help="Linux distribution to add to the stack",
        callback=distributions_callback,
        autocompletion=distributions_completion
        ),
    ):
    """
    Creates a stack
    """
    typer.echo(f"Creating stack '{stackname}'...")
    create_stack(stackname, ansible_versions, distributions)


@app.command()
def start(stackname: str = typer.Argument(
    None,
    help="The name of the stack to start",
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Starts a previously created stack
    """
    typer.echo(f"Starting stack '{stackname}'...")
    start_stack(stackname)


@app.command()
def stop(stackname: str = typer.Argument(
    None,
    help="The name of the stack to stop",
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Stops a previously started stack
    """
    typer.echo(f"Stopping stack '{stackname}'...")
    stop_stack(stackname)

@app.command()
def test(
    stackname: str = typer.Argument(
        None,
        help="The name of the stack used to test",
        callback=stackname_callback,
        autocompletion=stackname_completion
    ),
    rolename: str = typer.Argument(
        None,
        help="The name of the role to test"
    )
    ):
    """
    Test role <role> on stack <stackname>
    """
    test_on_stack(stackname, rolename)

@app.command()
def delete(stackname: str = typer.Argument(
    None,
    help="The name of the stack to delete",
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Deletes a previously created stack
    """
    typer.echo(f"Deleting stack '{stackname}'...")


@app.command("list")
def cmd_list():
    """
    Lists stacks
    """
    typer.echo("list stacks")
    stack_list()

# @app.command()
# def info(stackname: str):
#     """
#     Prints information about a stack
#     """
#     typer.echo(f"Information about stack '{stackname}'")
#     stack_info(stackname)

@app.command()
def version():
    """
    Prints playwithansible version
    """
    versions = ', '.join(supported_ansible_versions)
    distributions = ', '.join(supported_distributions)
    typer.echo(f"playwithansible {__version__}")
    typer.echo(f"\tSupported Ansible : {versions}")
    typer.echo(f"\tSupported Distribution : {distributions}")


if __name__ == "__main__":
    app()
