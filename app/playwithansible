#!/usr/bin/python3
from typing import List
import typer

from pwa.stack import create_stack, create_stack_testing, stack_info, stack_list, start_stack, stop_stack
from pwa.utils import stacks_list
from pwa.vars import __version__, supported_ansible_versions, supported_distributions

app = typer.Typer()

def version_callback(value: bool):
    if value:
        typer.echo(f"playwithansible\n\tVersion: {__version__}\n\tsupported Ansible versions: " + ', '.join(supported_ansible_versions ))
        raise typer.Exit()


def ansible_version_callback(ansible: str):    
    """
    Select Ansible version.
    """

    if ansible not in supported_ansible_versions:
        raise typer.BadParameter("Ansible supported versions: " + ', '.join(supported_ansible_versions))
    return ansible

def ansible_versions_callback(ansible_versions: List[str]):
    for version in ansible_versions:    
        if version not in supported_ansible_versions:
            raise typer.BadParameter("Ansible supported versions: " + ', '.join(supported_ansible_versions))
    return ansible_versions

def distributions_callback(distributions: List[str]):
    for distribution in distributions:
        if distribution not in supported_distributions:
            raise typer.BadParameter("supported distributions: " + ', '.join(supported_distributions))
    return distributions

def stackname_callback(stackname: str):
    stacks = stacks_list()
    if stackname not in stacks:
        raise typer.BadParameter("stacks: " + ', '.join(stacks))
    return stackname

def ansible_version_completion(incomplete: str):
    completion = []
    for version in supported_ansible_versions:
        if version.startswith(incomplete):
            completion.append(version)
    return completion
 
def distributions_completion(incomplete: str):
    completion = []
    for distribution in supported_distributions:
        if distribution.startswith(incomplete):
            completion.append(distribution)
    return completion 

def stackname_completion(incomplete: str):
    completion = []
    stacks = stacks_list()
    for stack in stacks:
        if stack.startswith(incomplete):
            completion.append(stack)
    return completion 


@app.command()
def create(stackname: str,    
    ansible: str = typer.Option(
        ..., "--ansible", "-a",
        callback=ansible_version_callback,
        autocompletion=ansible_version_completion
        ),
    distributions: List[str] = typer.Option(
        [], "--distribution", "-d",
        callback=distributions_callback,
        autocompletion=distributions_completion
        ),
    ):
    """
    Creates a stack
    """
    typer.echo(f"Creating stack '{stackname}'...")
    create_stack(stackname, distributions)

# @app.command()
# def create_testing(stackname: str,    
#     ansible_versions: List[str] = typer.Option(
#         [], "--ansible", "-a",
#         callback=ansible_versions_callback,
#         autocompletion=ansible_version_completion
#         ),
#     distributions: List[str] = typer.Option(
#         [], "--distribution", "-d",
#         callback=distributions_callback,
#         autocompletion=distributions_completion
#         ),
#     ):
#     """
#     Creates a testing stack
#     """
#     typer.echo(f"Creating testing stack '{stackname}'...")
#     create_stack_testing(stackname, ansible_versions, distributions)

@app.command()
def start(stackname: str = typer.Argument(
    '',
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Starts a previously created stack
    """
    typer.echo(f"Starting stack '{stackname}'...")
    start_stack(stackname)
 
@app.command()
def stop(stackname: str = typer.Argument(
    '',
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Stops a previously started stack
    """
    typer.echo(f"Stopping stack '{stackname}'...")
    stop_stack(stackname)

@app.command()
def delete(stackname: str = typer.Argument(
    '',
    callback=stackname_callback,
    autocompletion=stackname_completion
    )):
    """
    Deletes a previously created stack
    """
    typer.echo(f"Deleting stack '{stackname}'...")

@app.command("list")
def cmd_list():
    """
    Lists stacks
    """
    typer.echo("list stacks")
    stack_list()

# @app.command()
# def info(stackname: str):
#     """
#     Prints information about a stack
#     """
#     typer.echo(f"Information about stack '{stackname}'")
#     stack_info(stackname)

@app.command()
def version():
    """
    Prints playwithansible version
    """
    typer.echo(f"playwithansible {__version__}")
# def main(
#     ansible: str = typer.Option(
#         ..., ack=ansible_version_callback,
#         autocsompletion=ansible_version_completion
#         ),
#     distributions: str = typer.Option(
#         ..., "-Hv", count=True
#         ),
# ):
#     """
#     main message
#     """
#     typer.echo(
#         f"playwithansible starting...\n"
#         f"\tAnsible version: {ansible}\n"
#         f"\tDistributions: {distributions}"
#         )


if __name__ == "__main__":
    app()
